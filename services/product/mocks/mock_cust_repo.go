// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JesseNicholas00/EniqiloStore/repos/customer (interfaces: CustomerRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	customer "github.com/JesseNicholas00/EniqiloStore/repos/customer"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerRepository) CreateCustomer(arg0 customer.Customer) (customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerRepositoryMockRecorder) CreateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).CreateCustomer), arg0)
}

// FindCustomerByPhoneNumber mocks base method.
func (m *MockCustomerRepository) FindCustomerByPhoneNumber(arg0 string) (customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomerByPhoneNumber", arg0)
	ret0, _ := ret[0].(customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomerByPhoneNumber indicates an expected call of FindCustomerByPhoneNumber.
func (mr *MockCustomerRepositoryMockRecorder) FindCustomerByPhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomerByPhoneNumber", reflect.TypeOf((*MockCustomerRepository)(nil).FindCustomerByPhoneNumber), arg0)
}

// GetCustomerById mocks base method.
func (m *MockCustomerRepository) GetCustomerById(arg0 string) (customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0)
	ret0, _ := ret[0].(customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerById), arg0)
}

// ListCustomer mocks base method.
func (m *MockCustomerRepository) ListCustomer(arg0, arg1 string) ([]customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomer", arg0, arg1)
	ret0, _ := ret[0].([]customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomer indicates an expected call of ListCustomer.
func (mr *MockCustomerRepositoryMockRecorder) ListCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).ListCustomer), arg0, arg1)
}
